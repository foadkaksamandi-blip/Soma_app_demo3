// lib/services/ble_service.dart

import 'dart:async';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';
import 'package:flutter_reactive_ble/flutter_reactive_ble.dart';

/// BLE Service - سازگار با flutter_blue_plus v1.36.8
/// شامل اسکن، استاپ، و متدهای معادل startAdvertising / stopAdvertising برای سازگاری با کدهای قبلی
class BleService {
  final FlutterBluePlus _ble = FlutterBluePlus.instance;
  final FlutterReactiveBle _reactiveBle = FlutterReactiveBle();

  // وضعیت تبلیغ (فقط جهت شبیه‌سازی advertising)
  bool _isAdvertising = false;

  /// شروع اسکن (Scan for nearby devices)
  Future<void> startScan({Duration timeout = const Duration(seconds: 10)}) async {
    await _ble.startScan(timeout: timeout);
  }

  /// توقف اسکن
  Future<void> stopScan() async {
    await _ble.stopScan();
  }

  /// جریان نتایج اسکن
  Stream<List<ScanResult>> get scanResults => _ble.scanResults;

  /// جریان وضعیت اسکن (true/false)
  Stream<bool> get isScanning => _ble.isScanning;

  /// بررسی لحظه‌ای وضعیت اسکن
  bool get isScanningNow => _ble.isScanningNow;

  // ---------------------------------------------------------------------------
  // سازگاری با کدهای قدیمی flutter_ble_peripheral
  // ---------------------------------------------------------------------------

  /// متد قدیمی startAdvertising (در نسخه جدید فقط حالت نمایشی دارد)
  Future<void> startAdvertising() async {
    _isAdvertising = true;
    // اگر بعداً نیاز شد، می‌توانی اینجا Advertising واقعی reactive_ble را اضافه کنی
  }

  /// متد قدیمی stopAdvertising (در نسخه جدید فقط حالت نمایشی دارد)
  Future<void> stopAdvertising() async {
    _isAdvertising = false;
  }

  /// برای سازگاری با کدهایی که از ble.start(...) یا ble.stop() استفاده می‌کردند
  Future<void> start({dynamic settings, dynamic data}) async {
    await startAdvertising();
  }

  Future<void> stop() async {
    await stopAdvertising();
  }
}

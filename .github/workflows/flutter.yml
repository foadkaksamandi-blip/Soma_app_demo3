name: Build Android APKs (Seller & Buyer) — Real BLE + QR

on:
  workflow_dispatch: {}

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Flutter 3.24.3 (stable)
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: stable
          cache: true

      - name: Flutter doctor
        run: flutter doctor -v

      - name: Pub get
        run: flutter pub get

      - name: Create Android folder (V2 embedding)
        run: |
          rm -rf android
          flutter create --platforms=android --org com.soma --project-name soma_app_demo3 .

      - name: Pin Gradle wrapper to 8.4
        run: |
          cd android
          ./gradlew wrapper --gradle-version 8.4 --distribution-type all || true
          sed -i 's/gradle-[0-9.]\+-bin/gradle-8.4-all/' gradle/wrapper/gradle-wrapper.properties
          cd -

      - name: Force SDK versions
        run: |
          APP="android/app/build.gradle"
          sed -i 's/compileSdkVersion *[0-9]\+/compileSdkVersion 34/' "$APP" || true
          sed -i 's/targetSdkVersion *[0-9]\+/targetSdkVersion 34/' "$APP" || true
          sed -i 's/minSdkVersion *[0-9]\+/minSdkVersion 23/' "$APP" || true

      - name: Write AndroidManifest with BLE + camera perms
        run: |
          MAN="android/app/src/main/AndroidManifest.xml"
          mkdir -p android/app/src/main
          cat > "$MAN" <<'XML'
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.soma.soma_app_demo3">
    <uses-sdk android:minSdkVersion="23" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-feature android:name="android.hardware.camera.any" android:required="false" />

    <!-- BLE permissions -->
    <uses-permission android:name="android.permission.BLUETOOTH" />
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
    <uses-permission android:name="android.permission.BLUETOOTH_SCAN" android:usesPermissionFlags="neverForLocation" />
    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
    <uses-permission android:name="android.permission.BLUETOOTH_ADVERTISE" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />

    <application android:label="SOMA" android:icon="@mipmap/ic_launcher">
      <activity android:name=".MainActivity" android:exported="true" android:launchMode="singleTop">
        <intent-filter>
          <action android:name="android.intent.action.MAIN" />
          <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
      </activity>
    </application>
</manifest>
XML

      - name: Inject Kotlin (MethodChannel + GATT Server)
        run: |
          mkdir -p android/app/src/main/kotlin/com/soma/soma_app_demo3
          cat > android/app/src/main/kotlin/com/soma/soma_app_demo3/MainActivity.kt <<'KT'
package com.soma.soma_app_demo3

import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugin.common.MethodChannel

class MainActivity: FlutterActivity() {
    private val CHANNEL = "com.soma.app/ble"
    private var server: BleServer? = null

    override fun configureFlutterEngine(flutterEngine: FlutterEngine) {
        super.configureFlutterEngine(flutterEngine)
        MethodChannel(flutterEngine.dartExecutor.binaryMessenger, CHANNEL).setMethodCallHandler { call, result ->
            when (call.method) {
                "startServer" -> {
                    if (server == null) server = BleServer(this)
                    val ok = server?.start() ?: false
                    result.success(ok)
                }
                "stopServer" -> {
                    server?.stop()
                    result.success(true)
                }
                else -> result.notImplemented()
            }
        }
    }

    override fun onDestroy() {
        server?.stop()
        super.onDestroy()
    }
}
KT

          cat > android/app/src/main/kotlin/com/soma/soma_app_demo3/BleServer.kt <<'KT'
package com.soma.soma_app_demo3

import android.Manifest
import android.bluetooth.*
import android.bluetooth.le.AdvertiseCallback
import android.bluetooth.le.AdvertiseData
import android.bluetooth.le.AdvertiseSettings
import android.bluetooth.le.BluetoothLeAdvertiser
import android.content.Context
import android.content.pm.PackageManager
import android.os.ParcelUuid
import androidx.core.app.ActivityCompat
import java.nio.charset.Charset
import java.util.*

class BleServer(private val context: Context) {

    private val serviceUUID: UUID = UUID.fromString("0000A0A0-0000-1000-8000-00805F9B34FB")
    private val writeCharUUID: UUID = UUID.fromString("0000A0A1-0000-1000-8000-00805F9B34FB")

    private var manager: BluetoothManager? = null
    private var adapter: BluetoothAdapter? = null
    private var gattServer: BluetoothGattServer? = null
    private var advertiser: BluetoothLeAdvertiser? = null

    private val advertiseCallback = object : AdvertiseCallback() {}
    private val gattServerCallback = object : BluetoothGattServerCallback() {
        override fun onConnectionStateChange(device: BluetoothDevice?, status: Int, newState: Int) {
            super.onConnectionStateChange(device, status, newState)
        }
        override fun onCharacteristicWriteRequest(
            device: BluetoothDevice?, requestId: Int, characteristic: BluetoothGattCharacteristic?,
            preparedWrite: Boolean, responseNeeded: Boolean, offset: Int, value: ByteArray?
        ) {
            super.onCharacteristicWriteRequest(device, requestId, characteristic, preparedWrite, responseNeeded, offset, value)
            if (responseNeeded) {
                gattServer?.sendResponse(device, requestId, BluetoothGatt.GATT_SUCCESS, 0, null)
            }
            // اینجا داده‌ی JSON تراکنش از خریدار می‌رسد (value)
            // می‌توانید لاگ/پردازش/نوتیفای انجام دهید.
        }
    }

    fun start(): Boolean {
        manager = context.getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        adapter = manager?.adapter
        if (adapter == null || !adapter!!.isEnabled) return false

        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
            // در دمو CI، فرض می‌کنیم اعطا شده؛ در دستگاه واقعی باید از داخل اپ درخواست شود.
        }

        gattServer = manager?.openGattServer(context, gattServerCallback)
        val service = BluetoothGattService(serviceUUID, BluetoothGattService.SERVICE_TYPE_PRIMARY)
        val writeChar = BluetoothGattCharacteristic(
            writeCharUUID,
            BluetoothGattCharacteristic.PROPERTY_WRITE or BluetoothGattCharacteristic.PROPERTY_WRITE_NO_RESPONSE,
            BluetoothGattCharacteristic.PERMISSION_WRITE
        )
        service.addCharacteristic(writeChar)
        gattServer?.addService(service)

        advertiser = adapter?.bluetoothLeAdvertiser
        val settings = AdvertiseSettings.Builder()
            .setAdvertiseMode(AdvertiseSettings.ADVERTISE_MODE_LOW_LATENCY)
            .setTxPowerLevel(AdvertiseSettings.ADVERTISE_TX_POWER_HIGH)
            .setConnectable(true)
            .build()
        val data = AdvertiseData.Builder()
            .setIncludeDeviceName(true)
            .addServiceUuid(ParcelUuid(serviceUUID))
            .build()

        advertiser?.startAdvertising(settings, data, advertiseCallback)
        return true
    }

    fun stop() {
        try { advertiser?.stopAdvertising(advertiseCallback) } catch (_: Exception) {}
        try { gattServer?.close() } catch (_: Exception) {}
        advertiser = null
        gattServer = null
    }
}
KT

      - name: Flutter clean & get
        run: |
          flutter clean
          flutter pub get

      - name: Build Seller APK (debug)
        run: |
          mkdir -p artifacts
          flutter build apk --debug -t lib/seller_main.dart
          cp build/app/outputs/flutter-apk/app-debug.apk artifacts/seller-debug.apk

      - name: Build Buyer APK (debug)
        run: |
          flutter build apk --debug -t lib/buyer_main.dart
          cp build/app/outputs/flutter-apk/app-debug.apk artifacts/buyer-debug.apk

      - name: Upload Seller APK
        uses: actions/upload-artifact@v4
        with:
          name: seller-debug-apk
          path: artifacts/seller-debug.apk

      - name: Upload Buyer APK
        uses: actions/upload-artifact@v4
        with:
          name: buyer-debug-apk
          path: artifacts/buyer-debug.apk
